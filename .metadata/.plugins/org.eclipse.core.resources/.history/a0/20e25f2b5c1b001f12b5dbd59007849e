package de.demoncore.gui.dialogue;

import java.awt.Color;
import java.util.ArrayList;
import java.util.List;

import de.demoncore.actions.GameActionListener;
import de.demoncore.actions.KeyHandler;
import de.demoncore.game.GameObject;
import de.demoncore.game.SceneManager;
import de.demoncore.gui.GUIAlignment;
import de.demoncore.gui.GUIButton;
import de.demoncore.gui.GUIButtonClickEvent;
import de.demoncore.gui.GUIObject;
import de.demoncore.gui.GUIRectangle;
import de.demoncore.gui.GUIText;
import de.demoncore.gui.GUITextArea;
import de.demoncore.gui.GUITheme;
import de.demoncore.gui.GUITheme.Theme;
import de.demoncore.gui.Gui;
import de.demoncore.utils.Resources;

public class Dialog extends GameObject {
	
	List<GUIObject> content = new ArrayList<GUIObject>();

	private DialogLine activeLine;
	
	GUIText name;
	GUITextArea dialogueText;
	
	GameActionListener listener;
	
	public Dialog(DialogLine startLine) {
		super(0, 0, 0, 0);
		
		listener = new GameActionListener() {
			@Override
			public void OnSpaceKeyPressed() {
				super.OnSpaceKeyPressed();
				NextLine();
			}
		};
		KeyHandler.listeners.add(listener);

		this.activeLine = startLine;
		
		content.add(CreateBackground());
		
		name = new GUIText(0, -415, "", Resources.dialogFont.deriveFont(75F), new Color(1f, 1f, 1f, 1f));
		name.alignment = GUIAlignment.DownMiddle;
		content.add(name);
		
		GUIText spaceText = new GUIText(0, -25, "Press 'Space' >", Resources.uiFont.deriveFont(20F), new Color(1f, 1f, 1f, 1f));
		spaceText.alignment = GUIAlignment.DownMiddle;
		content.add(spaceText);
		
		GUIButton skipBtn = new GUIButton(-150, -415, 150, 35, "Skip Dialog >", Resources.uiFont.deriveFont(20F), new GUIButtonClickEvent() {
			@Override
			public void ButtonClick() {
				super.ButtonClick();
				DestroyDialog();
			}
		});
		skipBtn.alignment = GUIAlignment.DownRight;
		GUITheme.LoadButtonTheme(skipBtn, Theme.ButtonSecondary);
		content.add(skipBtn);
		
		dialogueText = new GUITextArea(25, -300, "",
				Resources.uiFont.deriveFont(35F), new Color(1f, 1f, 1f, 1f));
		dialogueText.alignment = GUIAlignment.DownLeft;
		dialogueText.centerText = false;
		dialogueText.maxLetterInOneLine = 75;
		GUITheme.LoadTextTheme(dialogueText, Theme.TextSecondary);
		content.add(dialogueText);
	}
	
	public void ShowDialog() {
		CreateDialog();
		NextLine();
	}
	
	void NextLine() {
		
		if(activeLine == null) {
			DestroyDialog();
			return;
		}
		
		Thread characterThread = new Thread("DialogAnimate") {
			@Override
			public void run() {
		
				String displayText = "";
				String dialogLineText = activeLine.GetLine();
				
				for(int c = 0; c < dialogLineText.length(); c++) {
					displayText += dialogLineText.charAt(c);
					
					try {
						Thread.sleep(250);
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
				}
				
				dialogueText.SetText(displayText);
			}
		};
		
		name.SetText(activeLine.GetName());
		characterThread.start();
		
		if(activeLine.GetNextLine() != null)
			activeLine = activeLine.GetNextLine();
		else {
			activeLine = null;
			return;
		}
	}
	
	void CreateDialog() {
		for(GUIObject o : content) {
			SceneManager.GetActiveScene().AddObject(o);
		}
	}
	
	void DestroyDialog() {
		SceneManager.GetActiveScene().DestroyObject(this);
		
		for(GUIObject o : content) {
			SceneManager.GetActiveScene().DestroyObject(o);
		}
	}
	
	@Override
	public void OnDestroy() {
		super.OnDestroy();

		KeyHandler.listeners.remove(listener);
	}
	
	protected GUIObject CreateBackground() {
		GUIRectangle bg = new GUIRectangle(0, -350/2, (int)Gui.GetScreenDimensions().x, (int)350, new Color(0.075f, 0.075f, 0.075f, 0.65f));
		bg.alignment = GUIAlignment.DownMiddle;
		return bg;
	}
	
}
