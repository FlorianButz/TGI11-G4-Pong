package de.demoncore.audio;

import org.lwjgl.openal.AL10;

import de.demoncore.game.Settings;
import de.demoncore.game.animator.Easing.EasingType;
import de.demoncore.game.animator.AnimatorOnCompleteEvent;
import de.demoncore.game.animator.AnimatorUpdateEvent;
import de.demoncore.game.animator.Vector3Animator;
import de.demoncore.utils.Vector3;

public class MusicManager {

	private static int sourceId;
	private static float volume;
	
	private static AudioClip activeMusic;
	
	public static void InitializeMusicManager() {
		sourceId = AL10.alGenSources();

		AL10.alSourcef(sourceId, AL10.AL_PITCH, 1f);
		AL10.alSource3f(sourceId, AL10.AL_POSITION, 0, 0, 0);
		SetVolume(1f);

		AudioMaster.AddOnMusicVolumeChangeListener(new OnMusicVolumeChangeListener() {
			
			@Override
			public void OnMusicVolumeChange(float volume) {
				SetRealVolume(volume);
			}
		});
	}
	
	public static void PlayMusic(AudioClip musicClip) {
		float originalVolume = volume;
		
		if(activeMusic != null) {
			
			Vector3Animator volumeAnim = new Vector3Animator(Vector3.one().multiply(originalVolume), Vector3.zero(), 0.5f, EasingType.InOutQuint);
			volumeAnim.SetOnUpdate(new AnimatorUpdateEvent() {@Override public void OnUpdate(Vector3 value) { super.OnUpdate(value); AL10.alSourcef(sourceId, AL10.AL_GAIN, value.x); }});
			volumeAnim.SetOnComplete(new AnimatorOnCompleteEvent() {
			@Override
			public void OnComplete() {
				super.OnComplete();
				
				AL10.alSourceStop(sourceId);
				activeMusic = musicClip;
				AL10.alSourcei(sourceId, AL10.AL_BUFFER, activeMusic.GetBuffer());
				AL10.alSourcePlay(sourceId);
				
				Vector3Animator volumeAnim = new Vector3Animator(Vector3.zero(), Vector3.one().multiply(originalVolume), 0.5f, EasingType.InOutQuint);
				volumeAnim.SetOnUpdate(new AnimatorUpdateEvent() {@Override public void OnUpdate(Vector3 value) { super.OnUpdate(value); AL10.alSourcef(sourceId, AL10.AL_GAIN, value.x); }});
				volumeAnim.Play();
			}
			});
			
			volumeAnim.Play();
		}
	}
	
	public static void SetVolume(float pVolume) {
		volume = pVolume * Settings.GetVolume();
		AL10.alSourcef(sourceId, AL10.AL_GAIN, volume);
	}

	public static void SetRealVolume(float pVolume) {
		volume = pVolume;
		AL10.alSourcef(sourceId, AL10.AL_GAIN, volume);
	}
}
